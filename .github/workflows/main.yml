name: Unity WebGL Build & Test

on:
  push:
    branches: [master]
  pull_request:
  workflow_dispatch:

jobs:
  prepare:
    name: üìù Get Unity Version
    runs-on: ubuntu-latest
    outputs:
      unityVersion: ${{ steps.unity-version.outputs.unityVersion }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üîç Read Unity version from ProjectVersion.txt
        id: unity-version
        run: |
          version=$(grep -oP '(?<=m_EditorVersion: ).*' ProjectSettings/ProjectVersion.txt)
          echo "Unity version detected: $version"
          echo "unityVersion=$version" >> $GITHUB_OUTPUT

  test:
    name: üß™ Run Tests
    needs: prepare
    runs-on: ubuntu-latest

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: üß™ Run Unity Test Runner
        uses: game-ci/unity-test-runner@v4
        with:
          unityVersion: ${{ needs.prepare.outputs.unityVersion }}
          testMode: playmode
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASS: ${{ secrets.KEY_ALIAS_PASS }}

  # build-webgl:
  #   name: üåê Build WebGL
  #   needs: [prepare, test]
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: üßæ Checkout repository
  #       uses: actions/checkout@v4
      
  #     - name: ‚òÅÔ∏è Cache Unity Library (WebGL)
  #       uses: actions/cache@v4
  #       with:
  #         path: Library
  #         key: Library-WebGL-${{ runner.os }}-${{ hashFiles('**/*.cs', '**/*.unity', '**/*.prefab') }}
  #         restore-keys: |
  #           Library-WebGL-${{ runner.os }}-

  #     - name: üß± Build WebGL
  #       uses: game-ci/unity-builder@v4
  #       with:
  #         targetPlatform: WebGL
  #         unityVersion: ${{ needs.prepare.outputs.unityVersion }}
  #         buildMethod: BuildScript.BuildWebGLForCI
  #       env:
  #         UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
  #         UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
  #         UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}

  #     - name: üì¶ Upload WebGL Build
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: WebGL-Build
  #         path: build/WebGL

  #     - name: üåç Deploy to GitHub Pages
  #       uses: peaceiris/actions-gh-pages@v4
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: build/WebGL

  build-android:
    name: üåê Build Android
    needs: [prepare, test]
    runs-on: ubuntu-latest
    secrets:
      UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
      UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
      UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      ANDROID_KEYSTORE_PASS: ${{ secrets.ANDROID_KEYSTORE_PASS }}
      ANDROID_KEYALIAS_NAME: ${{ secrets.ANDROID_KEYALIAS_NAME }}
      ANDROID_KEYALIAS_PASS: ${{ secrets.ANDROID_KEYALIAS_PASS }}

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4

      - name: ‚òÅÔ∏è Cache Unity Library (Android)
        uses: actions/cache@v4
        with:
          path: Library
          key: Library-Android-${{ runner.os }}-${{ hashFiles('**/*.cs', '**/*.unity', '**/*.prefab') }}
          restore-keys: |
            Library-Android-${{ runner.os }}-

      - name: üîê Decode Keystore
        run: |
          mkdir -p keystore
          echo "${{ secrets.KEYSTORE_BASE64 }}" | base64 -d > keystore/user.keystore

      - name: üì¶ Build Android APK
        uses: game-ci/unity-builder@v4
        with:
          targetPlatform: Android
          buildMethod: BuildScript.BuildAndroidForCI
          unityVersion: ${{ needs.prepare.outputs.unityVersion }}
          # customParameters: >
          #   -androidKeystoreName "keystore/user.keystore"
          #   -androidKeystorePass "${{ secrets.KEYSTORE_PASS }}"
          #   -androidKeyaliasName "${{ secrets.KEY_ALIAS }}"
          #   -androidKeyaliasPass "${{ secrets.KEY_ALIAS_PASS }}"
        env:
          UNITY_LICENSE: ${{ secrets.UNITY_LICENSE }}
          UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
          UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
          KEYSTORE_PASS: ${{ secrets.KEYSTORE_PASS }}
          KEY_ALIAS: ${{ secrets.KEY_ALIAS }}
          KEY_ALIAS_PASS: ${{ secrets.KEY_ALIAS_PASS }}

      - name: üì§ Upload APK as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: Android-APK
          path: build/Android/Game.apk